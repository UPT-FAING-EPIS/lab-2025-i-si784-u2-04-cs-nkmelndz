{
  "docs/EcommerceApp.Api.Controllers.CartController.html": {
    "href": "docs/EcommerceApp.Api.Controllers.CartController.html",
    "title": "Class CartController | EcommerceApp.Api",
    "summary": "Class CartController Namespace EcommerceApp.Api.Controllers Assembly EcommerceApp.Api.dll Controlador que gestiona las operaciones del carrito de compras. [ApiController] [Route(\"[controller]\")] public class CartController : ControllerBase Inheritance object ControllerBase CartController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CartController(ICartService, IPaymentService, IShipmentService, IDiscountService) Inicializa una nueva instancia del CartController. public CartController(ICartService cartService, IPaymentService paymentService, IShipmentService shipmentService, IDiscountService discountService) Parameters cartService ICartService Servicio del carrito de compras. paymentService IPaymentService Servicio de pagos. shipmentService IShipmentService Servicio de envíos. discountService IDiscountService Servicio de descuentos. Methods CheckOut(ICard, IAddressInfo) Procesa el checkout del carrito aplicando el pago y el envío. [HttpPost] public string CheckOut(ICard card, IAddressInfo addressInfo) Parameters card ICard Información de la tarjeta de pago. addressInfo IAddressInfo Información de envío. Returns string Mensaje indicando si el cargo fue exitoso."
  },
  "docs/EcommerceApp.Api.Controllers.html": {
    "href": "docs/EcommerceApp.Api.Controllers.html",
    "title": "Namespace EcommerceApp.Api.Controllers | EcommerceApp.Api",
    "summary": "Namespace EcommerceApp.Api.Controllers Classes CartController Controlador que gestiona las operaciones del carrito de compras."
  },
  "docs/EcommerceApp.Api.Models.IAddressInfo.html": {
    "href": "docs/EcommerceApp.Api.Models.IAddressInfo.html",
    "title": "Interface IAddressInfo | EcommerceApp.Api",
    "summary": "Interface IAddressInfo Namespace EcommerceApp.Api.Models Assembly EcommerceApp.Api.dll Representa la información de dirección del cliente. public interface IAddressInfo Properties Address Obtiene o establece la dirección adicional. string Address { get; set; } Property Value string City Obtiene o establece la ciudad. string City { get; set; } Property Value string PhoneNumber Obtiene o establece el número de teléfono. string PhoneNumber { get; set; } Property Value string PostalCode Obtiene o establece el código postal. string PostalCode { get; set; } Property Value string Street Obtiene o establece la calle. string Street { get; set; } Property Value string"
  },
  "docs/EcommerceApp.Api.Models.ICard.html": {
    "href": "docs/EcommerceApp.Api.Models.ICard.html",
    "title": "Interface ICard | EcommerceApp.Api",
    "summary": "Interface ICard Namespace EcommerceApp.Api.Models Assembly EcommerceApp.Api.dll Representa los datos de una tarjeta de crédito o débito. public interface ICard Properties CardNumber Obtiene o establece el número de la tarjeta. string CardNumber { get; set; } Property Value string Name Obtiene o establece el nombre del titular de la tarjeta. string Name { get; set; } Property Value string ValidTo Obtiene o establece la fecha de vencimiento de la tarjeta. DateTime ValidTo { get; set; } Property Value DateTime"
  },
  "docs/EcommerceApp.Api.Models.ICartItem.html": {
    "href": "docs/EcommerceApp.Api.Models.ICartItem.html",
    "title": "Interface ICartItem | EcommerceApp.Api",
    "summary": "Interface ICartItem Namespace EcommerceApp.Api.Models Assembly EcommerceApp.Api.dll Representa un artículo en el carrito de compras. public interface ICartItem Properties Price Obtiene o establece el precio por unidad. double Price { get; set; } Property Value double ProductId Obtiene o establece el identificador del producto. string ProductId { get; set; } Property Value string Quantity Obtiene o establece la cantidad del producto. int Quantity { get; set; } Property Value int"
  },
  "docs/EcommerceApp.Api.Models.html": {
    "href": "docs/EcommerceApp.Api.Models.html",
    "title": "Namespace EcommerceApp.Api.Models | EcommerceApp.Api",
    "summary": "Namespace EcommerceApp.Api.Models Interfaces IAddressInfo Representa la información de dirección del cliente. ICard Representa los datos de una tarjeta de crédito o débito. ICartItem Representa un artículo en el carrito de compras."
  },
  "docs/EcommerceApp.Api.Services.ICartService.html": {
    "href": "docs/EcommerceApp.Api.Services.ICartService.html",
    "title": "Interface ICartService | EcommerceApp.Api",
    "summary": "Interface ICartService Namespace EcommerceApp.Api.Services Assembly EcommerceApp.Api.dll Servicio que gestiona el carrito de compras del usuario. public interface ICartService Methods Items() Devuelve todos los artículos actualmente en el carrito. IEnumerable<ICartItem> Items() Returns IEnumerable<ICartItem> Colección de elementos del carrito. Total() Calcula el total del valor de los productos en el carrito. double Total() Returns double El valor total acumulado."
  },
  "docs/EcommerceApp.Api.Services.IDiscountService.html": {
    "href": "docs/EcommerceApp.Api.Services.IDiscountService.html",
    "title": "Interface IDiscountService | EcommerceApp.Api",
    "summary": "Interface IDiscountService Namespace EcommerceApp.Api.Services Assembly EcommerceApp.Api.dll Servicio encargado de aplicar descuentos a los totales del carrito. public interface IDiscountService Methods ApplyDiscount(double) Aplica un descuento al monto total especificado. double ApplyDiscount(double totalAmount) Parameters totalAmount double Monto original sin descuento. Returns double Monto con el descuento aplicado."
  },
  "docs/EcommerceApp.Api.Services.IPaymentService.html": {
    "href": "docs/EcommerceApp.Api.Services.IPaymentService.html",
    "title": "Interface IPaymentService | EcommerceApp.Api",
    "summary": "Interface IPaymentService Namespace EcommerceApp.Api.Services Assembly EcommerceApp.Api.dll Servicio que procesa el pago de una compra. public interface IPaymentService Methods Charge(double, ICard) Realiza el cargo del monto especificado usando la tarjeta proporcionada. bool Charge(double total, ICard card) Parameters total double Monto total a cobrar. card ICard Información de la tarjeta. Returns bool true si el cargo fue exitoso; de lo contrario, false."
  },
  "docs/EcommerceApp.Api.Services.IShipmentService.html": {
    "href": "docs/EcommerceApp.Api.Services.IShipmentService.html",
    "title": "Interface IShipmentService | EcommerceApp.Api",
    "summary": "Interface IShipmentService Namespace EcommerceApp.Api.Services Assembly EcommerceApp.Api.dll Servicio encargado del envío de productos al cliente. public interface IShipmentService Methods Ship(IAddressInfo, IEnumerable<ICartItem>) Realiza el envío de los productos a la dirección proporcionada. void Ship(IAddressInfo info, IEnumerable<ICartItem> items) Parameters info IAddressInfo Información de la dirección del cliente. items IEnumerable<ICartItem> Colección de productos a enviar."
  },
  "docs/EcommerceApp.Api.Services.html": {
    "href": "docs/EcommerceApp.Api.Services.html",
    "title": "Namespace EcommerceApp.Api.Services | EcommerceApp.Api",
    "summary": "Namespace EcommerceApp.Api.Services Interfaces ICartService Servicio que gestiona el carrito de compras del usuario. IDiscountService Servicio encargado de aplicar descuentos a los totales del carrito. IPaymentService Servicio que procesa el pago de una compra. IShipmentService Servicio encargado del envío de productos al cliente."
  },
  "docs/EcommerceApp.Tests.ControllerTests.html": {
    "href": "docs/EcommerceApp.Tests.ControllerTests.html",
    "title": "Class ControllerTests | EcommerceApp.Api",
    "summary": "Class ControllerTests Namespace EcommerceApp.Tests Assembly EcommerceApp.Tests.dll public class ControllerTests Inheritance object ControllerTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckOut_WithDiscounts_ReturnsExpectedResult(double, double, bool, string) [TestCase(new object?[] { 10, 2, true, \"charged\" })] [TestCase(new object?[] { 10, 5, false, \"not charged\" })] [TestCase(new object?[] { 10, 10, true, \"charged\" })] public void CheckOut_WithDiscounts_ReturnsExpectedResult(double total, double discount, bool chargeSuccess, string expectedResult) Parameters total double discount double chargeSuccess bool expectedResult string Setup() [SetUp] public void Setup() ShouldReturnCharged() [Test] public void ShouldReturnCharged() ShouldReturnNotCharged() [Test] public void ShouldReturnNotCharged()"
  },
  "docs/EcommerceApp.Tests.html": {
    "href": "docs/EcommerceApp.Tests.html",
    "title": "Namespace EcommerceApp.Tests | EcommerceApp.Api",
    "summary": "Namespace EcommerceApp.Tests Classes ControllerTests"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | EcommerceApp.Api",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | EcommerceApp.Api",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "Bienvenido a la documentación de EcommerceApp | EcommerceApp.Api",
    "summary": "Bienvenido a la documentación de EcommerceApp Este sitio contiene la documentación técnica de la API EcommerceApp.Api. Secciones principales Controladores EcommerceApp.Api.Controllers Modelos EcommerceApp.Api.Models Servicios EcommerceApp.Api.Services Tests EcommerceApp.Tests Esta documentación ha sido generada automáticamente con DocFX."
  }
}